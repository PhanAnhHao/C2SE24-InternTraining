## API Test Quick Reference (Base URL: http://localhost:5000)

**Important note:**
* Replace `<..._id>` with actual `_id` values from the database (after running seed.js or from GET API results).
* For requests requiring authentication, add Header: `Authorization: Bearer <your_jwt_token>` (get token from Login API).
* The sample ObjectIds below are from `seed.js`. You **must** use actual ObjectIds that exist in your DB.

---
**1. Authentication**
---

* **POST /auth/register**
    * Purpose: Register a new user (default Role: Student)
    * Body (JSON):
        ```json
        {
          "username": "testuser_quick",
          "password": "password123",
          "email": "test_quick@example.com",
          "userName": "Tester Quick",
          "location": "Test City",
          "phone": "0912345678",
          "age": 22,
          "school": "ABC University",
          "course": ["Information Technology", "Web Development"],
          "englishSkill": "Advanced"
        }
        ```
    * Note: Fields `age`, `school`, `course`, and `englishSkill` are optional. If not provided, the system will automatically create a Student record with default values. The `course` field is now an array of strings.
    * Return result: Includes the studentId of the automatically created Student record.

* **POST /auth/login**
    * Purpose: Get JWT Token
    * Body (JSON):
        ```json
        {
          "username": "student01", // Username from seed.js or registered
          "password": "student123" // Corresponding password
        }
        ```
    * => Save the `token` from the response.

* **GET /auth/me**
    * Purpose: Get information about the currently logged-in user.
    * Headers: `Authorization: Bearer <your_jwt_token>`

* **PUT /auth/edit-me**
    * Purpose: Update information for the currently logged-in user.
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Body (JSON):
        ```json
        {
          "userName": "Updated User Name",
          "email": "updated_email@example.com",
          "location": "Updated Location",
          "phone": "0987654321"
        }
        ```
    * Note: Only provide fields that need updating. Fields not provided will retain their original values.

---
**2. Accounts**
---

* **POST /api/accounts/add-account**
    * Purpose: Create a new Account with a specific Role (Example: Business).
    * Body (JSON):
        ```json
        {
          "username": "newbiz_quick",
          "email": "newbiz_quick@example.com",
          "password": "bizpass",
          "roleId": "660edabc12eac0f2fc123403" // ObjectId of 'Business' Role from seed.js
        }
        ```

* **GET /api/accounts/all-accounts**
    * Purpose: Get a list of all Accounts.

---
**3. Roles**
---

* **POST /api/roles/add-role**
    * Purpose: Add a new Role.
    * Body (JSON):
        ```json
        {
          "name": "Editor",
          "description": "Content editor"
        }
        ```

---
**4. Students**
---

* **POST /students**
    * Purpose: Create a Student profile (requires `userId` of a User with Student Role).
    * Body (JSON):
        ```json
        {
          "idStudent": "S_QUICK",
          "age": 20,
          "school": "Test University",
          "course": ["Testing API", "Web Development"],
          "englishSkill": "Intermediate",
          "userId": "<ObjectId_Of_User_With_Student_Role>" // Get from GET /users or DB
        }
        ```

* **GET /students**
    * Purpose: Get list of Students.

* **GET /students/<student_id>**
* **PUT /students/<student_id>** (JSON Body with fields to update)
* **DELETE /students/<student_id>**

---
**5. Businesses**
---

* **POST /businesses**
    * Purpose: Create a Business profile (requires `userId` of a User with Business Role).
    * Body (JSON):
        ```json
        {
          "idBusiness": "B_QUICK",
          "detail": "Quick Test Company",
          "userId": "<ObjectId_Of_User_With_Business_Role>" // Get from GET /users or DB
        }
        ```

* **GET /businesses**
    * Purpose: Get list of Businesses.

* **GET /businesses/<business_id>**
* **PUT /businesses/<business_id>** (JSON Body with fields to update)
* **DELETE /businesses/<business_id>**

* **POST /auth/register-business**
    * Purpose: Register a business account (Role: Business)
    * Body (JSON):
        ```json
        {
          "username": "business_user",
          "password": "password123",
          "email": "business@example.com",
          "userName": "Business Company",
          "location": "Business City",
          "phone": "0999888555",
          "detail": "A company specializing in software development"
        }
        ```
    * Note: idBusiness is automatically generated with the format "BUS" followed by 5 random digits (e.g., BUS12345)
    * Return result: Includes the automatically generated businessId.

---
**6. Languages**
---

* **POST /languages**
    * Purpose: Add a new programming language.
    * Body (JSON):
        ```json
        {
          "languageId": "RUST",
          "name": "Rust Lang"
        }
        ```

* **GET /languages**
    * Purpose: Get list of Languages.

* **GET /languages/<language_id>**
* **PUT /languages/<language_id>** (JSON Body with fields to update)
* **DELETE /languages/<language_id>**

---
**7. Courses**
---

* **POST /courses**
    * Purpose: Create a new course (requires `languageID`).
    * Body (JSON):
        ```json
        {
          "idCourse": "C_QUICK",
          "infor": "Quick API Test Course",
          "languageID": "<ObjectId_Of_JS_Language>" // Get from GET /languages or DB
        }
        ```
    * Note: The `rating` field has been removed. Course ratings are now managed through the Rating Collection.

* **GET /courses**
    * Purpose: Get list of Courses.

* **GET /courses/<course_id>**
* **PUT /courses/<course_id>** (JSON Body with fields to update)
* **DELETE /courses/<course_id>**

---
**8. Lessons**
---

* **POST /lessons**
    * Purpose: Create a new lesson (requires `idCourse`, `idTest`).
    * Body (JSON):
        ```json
        {
          "idLesson": "L_QUICK",
          "idCourse": "<ObjectId_Of_Course_C001>", // Get from GET /courses or DB
          "name": "Quick Test Lesson",
          "content": "Quick test content.",
          "linkVideo": "[http://example.com/video_quick](http://example.com/video_quick)",
          "status": "published",
          "idTest": "<ObjectId_Of_Test_JS101>" // Get from GET /tests or DB
        }
        ```

* **GET /lessons**
    * Purpose: Get list of Lessons.

* **GET /lessons/<lesson_id>**
* **PUT /lessons/<lesson_id>** (JSON Body with fields to update)
* **DELETE /lessons/<lesson_id>**

---
**9. Tests**
---

* **POST /tests**
    * Purpose: Create a new test.
    * Body (JSON):
        ```json
        {
          "idTest": "T_QUICK",
          "idLesson": "<ObjectId_Of_Lesson_L001>", // Get from GET /lessons or DB
          "content": "Quick Test",
          "idQuestion": [
            // "<ObjectId_Of_Question_Q001>", // Get from GET /questions or DB
            // Add other Question ObjectIds if available
          ]
        }
        ```

* **GET /tests**
    * Purpose: Get list of Tests with populated lesson and question information.

* **GET /tests/<test_id>**
    * Purpose: Get a specific test by ID with populated lesson and question information.

* **PUT /tests/<test_id>**
    * Purpose: Update a specific test.
    * Body (JSON - include only fields to update):
        ```json
        {
          "idLesson": "<new_lesson_id>",
          "content": "Updated Test Content",
          "idQuestion": ["<question_id_1>", "<question_id_2>"]
        }
        ```

* **DELETE /tests/<test_id>**
    * Purpose: Delete a specific test.

---
**10. Questions**
---

* **POST /questions**
    * Purpose: Create a new question (requires `idTest`).
    * Body (JSON):
        ```json
        {
          "idQuestion": "Q_QUICK",
          "idTest": "<ObjectId_Of_Test_JS101>", // Get from GET /tests or DB
          "question": "Quick test question?",
          "options": [
            "Option A", 
            "Option B", 
            "Option C", 
            "Option D"
          ],
          "correctAnswerIndex": 2, // Index of correct option (0-based)
          "answer": "Option C" // The text of the correct answer
        }
        ```

* **GET /questions**
    * Purpose: Get list of Questions.

* **GET /questions/<question_id>**
* **PUT /questions/<question_id>** (JSON Body with fields to update)
* **DELETE /questions/<question_id>**

---
**11. Users**
---

* **POST /users**
    * Purpose: Create a User profile (usually created automatically during Registration, but can be created separately if needed to link to a pre-created Account). Requires `idAccount`.
    * Body (JSON):
        ```json
        {
          "userName": "User Quick Test",
          "email": "user_quick@example.com",
          "location": "Location Quick",
          "phone": "0987654321",
          "idAccount": "<ObjectId_Of_Created_Account>" // Get from GET /api/accounts or DB
        }
        ```

* **GET /users**
    * Purpose: Get list of Users.

* **GET /users/<user_id>**
* **PUT /users/<user_id>** (JSON Body with fields to update)
* **DELETE /users/<user_id>**

---
**12. Test Mail**
---

* **POST /send-mail**
    * Purpose: Send a test email (requires .env configuration).
    * Body (JSON):
        ```json
        {
          "to": "your_real_email@example.com", // Real email to receive mail
          "subject": "Quick Test Email Subject",
          "message": "Quick test email body content."
        }
        ```

---
**13. History**
---

* **POST /history**
    * Purpose: Create a test-taking history record for a student.
    * Body (JSON):
        ```json
        {
          "studentId": "<ObjectId_Of_Student>", // Get from GET /students
          "testId": "<ObjectId_Of_Test>", // Get from GET /tests
          "score": 85,
          "passed": true
        }
        ```

* **GET /history**
    * Purpose: Get a list of all test history records.

* **GET /history/<history_id>**
    * Purpose: Get detailed information about a specific history record.

* **GET /history/student/<student_id>**
    * Purpose: Get all test history for a specific student.
    * Example: `/history/student/6152f9e1b24a1234567890ab`

* **PUT /history/<history_id>**
    * Purpose: Update a test history record.
    * Body (JSON):
        ```json
        {
          "score": 90,
          "passed": true
        }
        ```

* **DELETE /history/<history_id>**
    * Purpose: Delete a specific history record.

---
**14. Answers**
---

* **POST /answers**
    * Purpose: Submit an answer to a question.
    * Body (JSON):
        ```json
        {
          "content": "Option B", // Text of the selected answer
          "questionId": "<ObjectId_Of_Question>", // Get from GET /questions
          "userId": "<ObjectId_Of_User>", // Get from GET /users
          "selectedOptionIndex": 1, // Index of the selected option (0-based)
          "isCorrect": false // Whether the selected answer is correct
        }
        ```

* **GET /answers**
    * Purpose: Get a list of all answers.

* **GET /answers/<answer_id>**
    * Purpose: Get detailed information about a specific answer.

* **GET /answers/user/<user_id>**
    * Purpose: Get all answers from a specific user.
    * Example: `/answers/user/6152f9e1b24a1234567890cd`

* **GET /answers/question/<question_id>**
    * Purpose: Get all answers for a specific question.
    * Example: `/answers/question/6152f9e1b24a1234567890ef`

* **PUT /answers/<answer_id>**
    * Purpose: Update an answer.
    * Body (JSON):
        ```json
        {
          "content": "Option A",
          "selectedOptionIndex": 0,
          "isCorrect": true
        }
        ```

* **DELETE /answers/<answer_id>**
    * Purpose: Delete a specific answer.

---
**15. Ratings**
---

* **POST /ratings**
    * Purpose: Add a new rating for a course.
    * Body (JSON):
        ```json
        {
          "studentId": "<ObjectId_Of_Student>", // Get from GET /students
          "courseId": "<ObjectId_Of_Course>", // Get from GET /courses
          "stars": 4.5,
          "feedback": "The course was very helpful and informative"
        }
        ```

* **GET /ratings**
    * Purpose: Get a list of all ratings.

* **GET /ratings/<rating_id>**
    * Purpose: Get detailed information about a specific rating.

* **GET /ratings/course/<course_id>**
    * Purpose: Get all ratings for a specific course and the average rating.
    * Example: `/ratings/course/6152f9e1b24a1234567891ab`
    * Response will include: list of ratings, total number of ratings, and average rating.

* **GET /ratings/student/<student_id>**
    * Purpose: Get all ratings from a specific student.
    * Example: `/ratings/student/6152f9e1b24a1234567891cd`

* **PUT /ratings/<rating_id>**
    * Purpose: Update a rating.
    * Body (JSON):
        ```json
        {
          "stars": 5,
          "feedback": "Updated rating, the course is excellent"
        }
        ```

* **DELETE /ratings/<rating_id>**
    * Purpose: Delete a specific rating.

---
**16. Blogs**
---

* **POST /blogs**
    * Purpose: Create a new blog post.
    * Authentication: Required
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Body (form-data):
        ```
        title: "The Future of Web Development: React vs Next.js"
        content: "<p>As web technologies continue to evolve, developers must stay informed about the most efficient tools and frameworks available.</p><p>In this article, we'll compare React and Next.js and help you decide which might be best for your projects.</p>"
        tags: "Web Development,React,Next.js,JavaScript,Frontend"
        image: [file upload]
        status: "published" 
        ```
    * Note: `status` can be either "published" or "draft". Tags can be a comma-separated string or an array.
    * Note: For image upload, use form-data and set the field type to file for the image field.
    * **Authentication Note**: The API uses JWT tokens that contain Account IDs. The system automatically finds the associated User ID from the Account ID in your token and assigns it to the blog.

* **GET /blogs**
    * Purpose: Get a list of published blog posts with pagination.
    * Query Parameters:
        * `page`: Page number (default 1)
        * `limit`: Number of blogs per page (default 10)
        * `tag`: Filter by tag name (e.g., "JavaScript")
        * `search`: Search in title and content
        * `author`: Filter by author's user ID

* **GET /blogs/:id**
    * Purpose: Get a specific blog post with related blogs based on tags.
    * Note: This will increment the view count for the blog.

* **PUT /blogs/:id**
    * Purpose: Update a blog post.
    * Authentication: Required (only blog author can update)
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Body (form-data):
        ```
        title: "Advanced Features in Next.js 14: A Practical Guide"
        content: "<p>Next.js 14 introduces several powerful features that can significantly improve your development workflow and application performance.</p><p>Let's explore these features with practical examples.</p>"
        tags: "Next.js,Web Development,React,JavaScript,Server Components"
        image: [file upload] (optional)
        status: "published"
        ```
    * **Authentication Note**: The system validates that the User ID associated with your Account token matches the User ID of the blog author.

* **DELETE /blogs/:id**
    * Purpose: Delete a blog post.
    * Authentication: Required (only blog author can delete)
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * **Authentication Note**: The system validates that the User ID associated with your Account token matches the User ID of the blog author.

* **GET /blogs/user/blogs**
    * Purpose: Get blogs created by the authenticated user.
    * Authentication: Required
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Query Parameters:
        * `status`: Filter by status ("published" or "draft")
        * `page`: Page number (default 1)
        * `limit`: Number of blogs per page (default 10)
    * **Authentication Note**: The system automatically finds the User ID associated with your Account token and returns only blogs created by that user.

* **GET /blogs/tags/popular**
    * Purpose: Get popular tags sorted by usage count.
    * Response example:
        ```json
        [
          { "tag": "JavaScript", "count": 12 },
          { "tag": "Web Development", "count": 10 },
          { "tag": "React", "count": 8 },
          { "tag": "Programming", "count": 7 },
          { "tag": "Node.js", "count": 6 }
        ]
        ```