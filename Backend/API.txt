## API Test Quick Reference (Base URL: http://localhost:5000)

**Important note:**
* Replace `<..._id>` with actual `_id` values from the database (after running seed.js or from GET API results).
* For requests requiring authentication, add Header: `Authorization: Bearer <your_jwt_token>` (get token from Login API).
* The sample ObjectIds below are from `seed.js`. You **must** use actual ObjectIds that exist in your DB.

---
**1. Authentication**
---

* **POST /auth/register**
    * Purpose: Register a new user (default Role: Student)
    * Body (JSON):
        ```json
        {
          "username": "newuser_postman",
          "password": "password123",
          "email": "newuser_postman@example.com",
          "userName": "Postman Tester",
          "location": "Postman City",
          "phone": "0999888777",
          "age": 22,
          "school": "Đại học Postman",
          "course": ["API Testing", "Web Development"],
          "englishSkill": "Advanced"
        }
        ```
    * Note: Fields `age`, `school`, `course`, and `englishSkill` are optional. If not provided, the system will automatically create a Student record with default values. The `course` field is an array of strings.

* **POST /auth/register-business**
    * Purpose: Register a business account (Role: Business)
    * Body (JSON):
        ```json
        {
          "username": "business_user",
          "password": "password123",
          "email": "business@example.com",
          "userName": "Business Company",
          "location": "Business City",
          "phone": "0999888555",
          "detail": "A company specializing in software development",
          "type": "Technology"
        }
        ```
    * Note: idBusiness is automatically generated with the format "BUSxxxxx" (e.g., BUS12345)

* **POST /auth/login**
    * Purpose: Get JWT Token
    * Body (JSON):
        ```json
        {
          "username": "student01",
          "password": "student123"
        }
        ```
    * => Save the `token` from the response.

* **GET /auth/me**
    * Purpose: Get information about the currently logged-in user.
    * Headers: `Authorization: Bearer <your_jwt_token>`

* **PUT /auth/edit-me**
    * Purpose: Update information for the currently logged-in user.
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Body (JSON):
        ```json
        {
          "userName": "Updated User Name",
          "email": "updated_email@example.com",
          "location": "Updated Location",
          "phone": "0987654321"
        }
        ```

---
**2. Accounts**
---

* **POST /api/accounts/add-account**
    * Purpose: Create a new Account with a specific Role
    * Body (JSON):
        ```json
        {
          "username": "manual_account",
          "email": "manual@example.com",
          "password": "manualpass",
          "roleId": "660edabc12eac0f2fc123403"  // ObjectId of desired Role
        }
        ```

* **GET /api/accounts/all-accounts**
    * Purpose: Get a list of all Accounts.

* **GET /api/accounts/account/:id**
    * Purpose: Get account details by ID

* **PUT /api/accounts/update-account/:id**
    * Purpose: Update account information
    * Body (JSON):
        ```json
        {
          "username": "updated_username",
          "email": "updated@example.com",
          "roleId": "660edabc12eac0f2fc123403"
        }
        ```

* **DELETE /api/accounts/delete-account/:id**
    * Purpose: Delete an account

---
**3. Roles**
---

* **POST /api/roles/add-role**
    * Purpose: Add a new Role
    * Body (JSON):
        ```json
        {
          "name": "SupportStaff",
          "description": "Nhân viên hỗ trợ"
        }
        ```

---
**4. Students**
---

* **POST /students**
    * Purpose: Create a Student profile
    * Body (JSON):
        ```json
        {
          "idStudent": "S_POSTMAN",
          "age": 21,
          "school": "Đại học Postman",
          "course": ["API Testing", "Web Development"],
          "englishSkill": "Advanced",
          "userId": "<ObjectId_User_Co_Role_Student>"
        }
        ```

* **GET /students**
    * Purpose: Get list of Students

* **GET /students/:id**
    * Purpose: Get student details by ID

* **PUT /students/:id**
    * Purpose: Update student information
    * Body (JSON):
        ```json
        {
          "school": "Đại học Postman Updated",
          "age": 22
        }
        ```

* **DELETE /students/:id**
    * Purpose: Delete a student

---
**5. Businesses**
---

* **POST /businesses**
    * Purpose: Create a Business profile
    * Body (JSON):
        ```json
        {
          "idBusiness": "B_POSTMAN",
          "type": "Consulting",
          "detail": "Công ty Postman Solutions",
          "userId": "<ObjectId_User_Co_Role_Business>"
        }
        ```

* **GET /businesses**
    * Purpose: Get list of Businesses

* **GET /businesses/:id**
    * Purpose: Get business details by ID

* **PUT /businesses/:id**
    * Purpose: Update business information
    * Body (JSON):
        ```json
        {
          "detail": "Công ty Postman Solutions - Tuyển dụng API Tester"
        }
        ```

* **DELETE /businesses/:id**
    * Purpose: Delete a business

---
**6. Languages**
---

* **POST /languages**
    * Purpose: Add a new programming language
    * Body (JSON):
        ```json
        {
          "languageId": "KOTLIN",
          "name": "Kotlin Lang"
        }
        ```

* **GET /languages**
    * Purpose: Get list of Languages

* **GET /languages/:id**
    * Purpose: Get language details by ID

* **PUT /languages/:id**
    * Purpose: Update language information
    * Body (JSON):
        ```json
        {
          "name": "Kotlin for Android"
        }
        ```

* **DELETE /languages/:id**
    * Purpose: Delete a language

---
**7. Courses**
---

* **POST /courses**
    * Purpose: Create a new course
    * Body (JSON):
        ```json
        {
          "idCourse": "C_POSTMAN",
          "infor": "Khóa học Postman Nâng cao",
          "languageID": "<ObjectId_Cua_Language_JS>",
          "businessId": "<businessId>"
        }
        ```

* **GET /courses**
    * Purpose: Get list of Courses
    * Query Parameters:
        * `businessId`: Filter courses by business ID (optional)
    * Response includes:
        * Course details with language information
        * Ratings with student information (idStudent and userName)
        * Average rating and total ratings count

* **GET /courses/business/:businessId**
    * Purpose: Get all courses for a specific business

* **GET /courses/:id**
    * Purpose: Get course details by ID
    * Response includes:
        * Course details with language information
        * Ratings with student information (idStudent and userName)
        * Average rating and total ratings count
    * Query Parameters:
        * `studentId`: Include progress information for this student (optional)

* **PUT /courses/:id**
    * Purpose: Update course information
    * Body (JSON):
        ```json
        {
          "infor": "Khóa học Postman Nâng cao và Tự động hóa Test"
        }
        ```

* **DELETE /courses/:id**
    * Purpose: Delete a course

---
**8. Lessons**
---

* **POST /lessons**
    * Purpose: Create a new lesson
    * Body (JSON):
        ```json
        {
          "idLesson": "L_POSTMAN",
          "idCourse": "<ObjectId_Cua_Course>",
          "name": "Bài học về Variables trong Postman",
          "content": "Cách sử dụng biến môi trường, collection, global.",
          "linkVideo": "http://example.com/postman_vars",
          "status": "published",
          "idTest": "<ObjectId_Cua_Test>"
        }
        ```

* **GET /lessons**
    * Purpose: Get list of Lessons

* **GET /lessons/:id**
    * Purpose: Get lesson details by ID

* **PUT /lessons/:id**
    * Purpose: Update lesson information
    * Body (JSON):
        ```json
        {
          "name": "Bài học về Scripting trong Postman",
          "status": "draft"
        }
        ```

* **DELETE /lessons/:id**
    * Purpose: Delete a lesson

---
**9. Tests**
---

* **POST /tests**
    * Purpose: Create a new test
    * Body (JSON):
        ```json
        {
          "idTest": "T_POSTMAN",
          "idLesson": "<ObjectId_Cua_Lesson>",
          "content": "Bài Test về kiến thức Postman cơ bản",
          "idQuestion": []
        }
        ```

* **GET /tests**
    * Purpose: Get list of Tests

* **GET /tests/business/:businessId**
    * Purpose: Get all tests for courses of a specific business

* **GET /tests/:id**
    * Purpose: Get test details by ID

* **PUT /tests/:id**
    * Purpose: Update test information
    * Body (JSON):
        ```json
        {
          "content": "Bài Test về kiến thức Postman cơ bản và nâng cao",
          "idQuestion": [
            "<ObjectId_Cua_Question_Da_Tao_1>",
            "<ObjectId_Cua_Question_Da_Tao_2>"
          ]
        }
        ```

* **DELETE /tests/:id**
    * Purpose: Delete a test

---
**10. Questions**
---

* **POST /questions**
    * Purpose: Create a new question
    * Body (JSON):
        ```json
        {
          "idQuestion": "Q_POSTMAN",
          "idTest": "<ObjectId_Cua_Test>",
          "question": "Biến Collection trong Postman dùng để làm gì?",
          "options": [
            "Lưu trữ giá trị dùng chung trong một Collection",
            "Lưu trữ giá trị cho các môi trường khác nhau",
            "Lưu trữ giá trị tạm thời",
            "Lưu trữ giá trị vĩnh viễn"
          ],
          "correctAnswerIndex": 0
        }
        ```

* **GET /questions**
    * Purpose: Get list of Questions

* **GET /questions/:id**
    * Purpose: Get question details by ID

* **PUT /questions/:id**
    * Purpose: Update question information
    * Body (JSON):
        ```json
        {
          "question": "Biến Environment trong Postman dùng để làm gì?",
          "answer": "Lưu trữ giá trị cho các môi trường khác nhau (dev, staging, prod)."
        }
        ```

* **DELETE /questions/:id**
    * Purpose: Delete a question

---
**11. Answers**
---

* **POST /answers**
    * Purpose: Submit an answer
    * Body (JSON):
        ```json
        {
          "content": "Đây là câu trả lời của tôi",
          "questionId": "<ObjectId_Of_Question>",
          "userId": "<ObjectId_Of_User>",
          "selectedOptionIndex": 0,
          "isCorrect": false
        }
        ```

* **POST /answers/submit-test**
    * Purpose: Submit answers for a complete test
    * Body (JSON):
        ```json
        {
          "testId": "<ObjectId_Of_Test>",
          "userId": "<ObjectId_Of_Student>",
          "answers": [
            {
              "questionId": "<ObjectId_Of_Question1>",
              "selectedOptionIndex": 0
            },
            {
              "questionId": "<ObjectId_Of_Question2>",
              "selectedOptionIndex": 1
            }
          ]
        }
        ```

* **GET /answers**
    * Purpose: Get list of all answers

* **GET /answers/:id**
    * Purpose: Get answer details by ID

* **GET /answers/user/:userId**
    * Purpose: Get all answers from a specific user

* **GET /answers/question/:questionId**
    * Purpose: Get all answers for a specific question

* **PUT /answers/:id**
    * Purpose: Update an answer
    * Body (JSON):
        ```json
        {
          "content": "Đây là câu trả lời đã cập nhật",
          "isCorrect": true
        }
        ```

* **DELETE /answers/:id**
    * Purpose: Delete an answer

---
**12. Ratings**
---

* **POST /ratings**
    * Purpose: Add a new rating
    * Body (JSON):
        ```json
        {
          "studentId": "<ObjectId_Of_Student>",
          "courseId": "<ObjectId_Of_Course>",
          "stars": 4.5,
          "feedback": "Khóa học rất hay và bổ ích"
        }
        ```

* **GET /ratings**
    * Purpose: Get list of all ratings

* **GET /ratings/:id**
    * Purpose: Get rating details by ID

* **GET /ratings/course/:courseId**
    * Purpose: Get all ratings for a specific course

* **GET /ratings/student/:studentId**
    * Purpose: Get all ratings from a specific student

* **PUT /ratings/:id**
    * Purpose: Update a rating
    * Body (JSON):
        ```json
        {
          "stars": 5,
          "feedback": "Đánh giá đã được cập nhật, khóa học xuất sắc"
        }
        ```

* **DELETE /ratings/:id**
    * Purpose: Delete a rating

---
**13. History**
---

* **POST /history**
    * Purpose: Save test results to history
    * Body (JSON):
        ```json
        {
          "studentId": "<ObjectId_Of_Student>",
          "testId": "<ObjectId_Of_Test>"
        }
        ```

* **GET /history**
    * Purpose: Get all test history entries

* **GET /history/:id**
    * Purpose: Get specific history entry by ID

* **GET /history/student/:studentId**
    * Purpose: Get all test history for a specific student

* **GET /history/test/:testId**
    * Purpose: Get all history entries for a specific test

* **GET /history/course/:courseId**
    * Purpose: Get all test history for all students in a specific course
    * Details: Returns comprehensive data including:
      * Course information
      * Overall statistics (total students, average score, pass rate)
      * Detailed test results for all students
    * Example URL: `http://localhost:5000/history/course/{{courseId}}`

* **DELETE /history/:id**
    * Purpose: Delete a history entry

---
**14. Blogs**
---

* **POST /blogs**
    * Purpose: Create a new blog post
    * Authentication: Required
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Body (form-data):
        ```
        title: "The Future of Web Development: React vs Next.js"
        content: "<p>As web technologies continue to evolve...</p>"
        tags: "Web Development,React,Next.js,JavaScript,Frontend"
        status: "published"
        image: [file upload]
        ```

* **GET /blogs**
    * Purpose: Get list of published blog posts
    * Query Parameters:
        * `page`: Page number (default 1)
        * `limit`: Items per page (default 10)
        * `tag`: Filter by tag
        * `search`: Search in title/content
        * `author`: Filter by author ID

* **GET /blogs/:id**
    * Purpose: Get specific blog post with related blogs

* **PUT /blogs/:id**
    * Purpose: Update blog post
    * Authentication: Required (author only)
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Body (form-data):
        ```
        title: "Updated Title"
        content: "<p>Updated content...</p>"
        tags: "Updated,Tags"
        status: "published"
        image: [file upload]
        ```

* **DELETE /blogs/:id**
    * Purpose: Delete blog post
    * Authentication: Required (author only)
    * Headers: `Authorization: Bearer <your_jwt_token>`

* **GET /blogs/user/blogs**
    * Purpose: Get blogs by authenticated user
    * Authentication: Required
    * Headers: `Authorization: Bearer <your_jwt_token>`
    * Query Parameters:
        * `status`: Filter by status
        * `page`: Page number
        * `limit`: Items per page

* **GET /blogs/tags/popular**
    * Purpose: Get popular tags sorted by usage count

---
**15. File Uploads**
---

* **POST /api/upload**
    * Purpose: Upload an image to Firebase Storage
    * Body (form-data):
        ```
        image: [file upload]
        ```
    * Response:
        ```json
        {
          "imageUrl": "https://storage.googleapis.com/your-bucket/images/1620000000000_image.jpg"
        }
        ```

* **POST /api/upload-cv**
    * Purpose: Upload a CV document (.pdf or .docx) to Firebase Storage
    * Body (form-data):
        ```
        document: [file upload - PDF/DOCX only, max 5MB]
        studentId: "student-id" (optional metadata)
        ```
    * Response:
        ```json
        {
          "documentUrl": "https://storage.googleapis.com/your-bucket/cv_documents/1620000000000_resume.pdf",
          "fileName": "resume.pdf",
          "fileType": "application/pdf",
          "uploadDate": "2023-05-13T10:30:00.000Z"
        }
        ```

* **PUT /users/:id/cv**
    * Purpose: Update user profile with CV document information
    * Body (JSON):
        ```json
        {
          "documentUrl": "https://storage.googleapis.com/your-bucket/cv_documents/1620000000000_resume.pdf",
          "fileName": "resume.pdf",
          "fileType": "application/pdf",
          "uploadDate": "2023-05-13T10:30:00.000Z"
        }
        ```
    * Response: Updated user object with CV information

---
**16. View Requests**
---

* **POST /api/view-requests/request**
    * Purpose: Create a new view request
    * Body (JSON):
        ```json
        {
          "studentId": "<studentId>"
        }
        ```

* **POST /api/view-requests/response/:requestToken**
    * Purpose: Handle view request response
    * Body (JSON):
        ```json
        {
          "approve": true
        }
        ```

* **GET /api/view-requests/access/:accessToken**
    * Purpose: Access student profile
    * Headers: `Authorization: Bearer <your_jwt_token>`

---
**16. Student Lesson Progress**
---

* **GET /progress**
    * Purpose: Get all progress records

* **GET /progress/student/:studentId**
    * Purpose: Get progress for specific student

* **GET /progress/student/:studentId/overview**
    * Purpose: Get progress overview for student

* **GET /progress/lesson/:lessonId**
    * Purpose: Get progress for specific lesson

* **GET /progress/:studentId/:lessonId**
    * Purpose: Get specific progress record

* **POST /progress**
    * Purpose: Create/Update progress record
    * Body (JSON):
        ```json
        {
          "studentId": "<studentId>",
          "lessonId": "<lessonId>",
          "status": "in_progress",
          "progress": 45,
          "watchTime": 900,
          "notes": "Student is making good progress"
        }
        ```

* **DELETE /progress/:studentId/:lessonId**
    * Purpose: Delete progress record

* **GET /lessons/:lessonId?studentId=:studentId**
    * Purpose: Get lesson with progress info

* **GET /lessons/course/:courseId?studentId=:studentId**
    * Purpose: Get course lessons with progress

* **GET /courses/:courseId?studentId=:studentId**
    * Purpose: Get course with progress summary

* **GET /courses/business/:businessId?studentId=:studentId**
    * Purpose: Get business courses with progress