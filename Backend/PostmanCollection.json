{
	"info": {
		"_postman_id": "YOUR_COLLECTION_ID",
		"name": "Backend Project API (Final)",
		"description": "API collection for the Node.js backend project, including CRUD operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"newuser_postman\",\n  \"password\": \"password123\",\n  \"email\": \"newuser_postman@example.com\",\n  \"userName\": \"Postman Tester\",\n  \"location\": \"Postman City\",\n  \"phone\": \"0999888777\",\n  \"age\": 22,\n  \"school\": \"Đại học Postman\",\n  \"course\": \"API Testing\",\n  \"englishSkill\": \"Advanced\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Đăng ký người dùng mới (mặc định Role Student). Tự động tạo student record với ID sinh viên ngẫu nhiên. Các trường age, school, course, và englishSkill là tùy chọn, nếu không cung cấp sẽ dùng giá trị mặc định."
					},
					"response": []
				},
				{
					"name": "Register Business",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"business_user\",\n  \"password\": \"password123\",\n  \"email\": \"business@example.com\",\n  \"userName\": \"Business Company\",\n  \"location\": \"Business City\",\n  \"phone\": \"0999888555\",\n  \"detail\": \"A company specializing in software development\",\n  \"type\": \"Technology\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register-business",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register-business"
							]
						},
						"description": "Đăng ký tài khoản doanh nghiệp (Role Business). idBusiness được tạo tự động với định dạng BUSxxxxx (ví dụ: BUS12345)."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tự động lưu token vào biến collection 'token'",
									"if (pm.response.code === 200) {",
									"    pm.collectionVariables.set(\"token\", pm.response.json().token);",
									"    console.log('Token saved to collection variable: token');",
									"} else {",
									"    console.log('Login failed or did not return a token.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"student01\",\n  \"password\": \"student123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Đăng nhập để lấy JWT Token. Token sẽ tự động lưu vào biến {{token}}."
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						},
						"description": "Lấy thông tin người dùng đang đăng nhập (yêu cầu token)"
					},
					"response": []
				},
				{
					"name": "Edit Current User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userName\": \"Updated User Name\",\n  \"email\": \"updated_email@example.com\",\n  \"location\": \"Updated Location\",\n  \"phone\": \"0987654321\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/edit-me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"edit-me"
							]
						},
						"description": "Cập nhật thông tin người dùng đang đăng nhập (yêu cầu token)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Add Account",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"manual_account\",\n  \"email\": \"manual@example.com\",\n  \"password\": \"manualpass\",\n  \"roleId\": \"660edabc12eac0f2fc123403\"  // Thay bằng ObjectId của Role mong muốn (vd: Business)\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/accounts/add-account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								"add-account"
							]
						},
						"description": "Tạo tài khoản với Role ID cụ thể"
					},
					"response": []
				},
				{
					"name": "Get All Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của account đầu tiên vào biến collection 'accountId'",
									"if (pm.response.code === 200) {",
									"    const accounts = pm.response.json();",
									"    if (accounts && accounts.length > 0) {",
									"        pm.collectionVariables.set(\"accountId\", accounts[0]._id);",
									"        console.log(`Saved first account ID to collection variable 'accountId': ${accounts[0]._id}`);",
									"    } else {",
									"        console.log('No accounts found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get accounts.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/all-accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								"all-accounts"
							]
						},
						"description": "Lấy danh sách tất cả tài khoản"
					},
					"response": []
				},
				{
					"name": "Get Account by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/account/{{accountId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								"account",
								"{{accountId}}"
							]
						},
						"description": "Lấy thông tin chi tiết của tài khoản theo ID"
					},
					"response": []
				},
				{
					"name": "Update Account",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"updated_username\",\n  \"email\": \"updated@example.com\",\n  \"roleId\": \"660edabc12eac0f2fc123403\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/accounts/update-account/{{accountId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								"update-account",
								"{{accountId}}"
							]
						},
						"description": "Cập nhật thông tin tài khoản theo ID"
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/accounts/delete-account/{{accountId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"accounts",
								"delete-account",
								"{{accountId}}"
							]
						},
						"description": "Xóa tài khoản theo ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Add Role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"SupportStaff\",\n  \"description\": \"Nhân viên hỗ trợ\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/roles/add-role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"roles",
								"add-role"
							]
						},
						"description": "Tạo Role mới"
					},
					"response": []
				}
			]
		},
		{
			"name": "Students",
			"item": [
				{
					"name": "Create Student",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"idStudent\": \"S_POSTMAN\",\n  \"age\": 21,\n  \"school\": \"Đại học Postman\",\n  \"course\": [\"API Testing\", \"Web Development\"],\n  \"englishSkill\": \"Advanced\",\n  \"userId\": \"<ObjectId_User_Co_Role_Student>\" // Lấy từ GET /users hoặc DB\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/students",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students"
							]
						},
						"description": "Tạo hồ sơ Student mới (cần userId hợp lệ)"
					},
					"response": []
				},
				{
					"name": "Get All Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tự động lưu _id của student đầu tiên vào biến collection 'studentId'",
									"if (pm.response.code === 200) {",
									"    const students = pm.response.json();",
									"    if (students && students.length > 0) {",
									"        pm.collectionVariables.set(\"studentId\", students[0]._id);",
									"        console.log(`Saved first student ID to collection variable 'studentId': ${students[0]._id}`);",
									"    } else {",
									"        console.log('No students found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get students.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/students",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students"
							]
						},
						"description": "Lấy danh sách Students. Lưu _id student đầu tiên vào {{studentId}}."
					},
					"response": []
				},
				{
					"name": "Get Student by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/students/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students",
								"{{studentId}}"
							]
						},
						"description": "Lấy thông tin Student theo {{studentId}}"
					},
					"response": []
				},
				{
					"name": "Update Student",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"school\": \"Đại học Postman Updated\",\n  \"age\": 22\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/students/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students",
								"{{studentId}}"
							]
						},
						"description": "Cập nhật thông tin Student theo {{studentId}}"
					},
					"response": []
				},
				{
					"name": "Delete Student",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/students/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"students",
								"{{studentId}}"
							]
						},
						"description": "Xóa Student theo {{studentId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Businesses",
			"item": [
				{
					"name": "Create Business",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"idBusiness\": \"B_POSTMAN\",\n  \"type\": \"Consulting\",\n  \"detail\": \"Công ty Postman Solutions\",\n  \"userId\": \"<ObjectId_User_Co_Role_Business>\" // Lấy từ GET /users hoặc DB\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/businesses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"businesses"
							]
						},
						"description": "Tạo hồ sơ Business mới (cần userId hợp lệ)"
					},
					"response": []
				},
				{
					"name": "Get All Businesses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tự động lưu _id của business đầu tiên vào biến collection 'businessId'",
									"if (pm.response.code === 200) {",
									"    const businesses = pm.response.json();",
									"    if (businesses && businesses.length > 0) {",
									"        pm.collectionVariables.set(\"businessId\", businesses[0]._id);",
									"        console.log(`Saved first business ID to collection variable 'businessId': ${businesses[0]._id}`);",
									"    } else {",
									"        console.log('No businesses found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get businesses.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/businesses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"businesses"
							]
						},
						"description": "Lấy danh sách Businesses. Lưu _id business đầu tiên vào {{businessId}}."
					},
					"response": []
				},
				{
					"name": "Get Business by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/businesses/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"businesses",
								"{{businessId}}"
							]
						},
						"description": "Lấy thông tin Business theo {{businessId}}"
					},
					"response": []
				},
				{
					"name": "Update Business",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"detail\": \"Công ty Postman Solutions - Tuyển dụng API Tester\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/businesses/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"businesses",
								"{{businessId}}"
							]
						},
						"description": "Cập nhật thông tin Business theo {{businessId}}"
					},
					"response": []
				},
				{
					"name": "Delete Business",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/businesses/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"businesses",
								"{{businessId}}"
							]
						},
						"description": "Xóa Business theo {{businessId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Languages",
			"item": [
				{
					"name": "Create Language",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"languageId\": \"KOTLIN\",\n  \"name\": \"Kotlin Lang\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/languages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"languages"
							]
						},
						"description": "Tạo Language mới"
					},
					"response": []
				},
				{
					"name": "Get All Languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của language đầu tiên vào biến collection 'languageId'",
									"if (pm.response.code === 200) {",
									"    const languages = pm.response.json();",
									"    if (languages && languages.length > 0) {",
									"        pm.collectionVariables.set(\"languageId\", languages[0]._id);",
									"        console.log(`Saved first language ID to collection variable 'languageId': ${languages[0]._id}`);",
									"    } else {",
									"        console.log('No languages found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get languages.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/languages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"languages"
							]
						},
						"description": "Lấy danh sách Languages. Lưu _id language đầu tiên vào {{languageId}}."
					},
					"response": []
				},
				{
					"name": "Get Language by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/languages/{{languageId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"languages",
								"{{languageId}}"
							]
						},
						"description": "Lấy thông tin Language theo {{languageId}}"
					},
					"response": []
				},
				{
					"name": "Update Language",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Kotlin for Android\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/languages/{{languageId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"languages",
								"{{languageId}}"
							]
						},
						"description": "Cập nhật thông tin Language theo {{languageId}}"
					},
					"response": []
				},
				{
					"name": "Delete Language",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/languages/{{languageId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"languages",
								"{{languageId}}"
							]
						},
						"description": "Xóa Language theo {{languageId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "Create Course",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"idCourse\": \"C_POSTMAN\",\n  \"infor\": \"Khóa học Postman Nâng cao\",\n  \"languageID\": \"<ObjectId_Cua_Language_JS>\", // Thay bằng ObjectId của Language JS hoặc language khác\n  \"businessId\": \"{{businessId}}\" // Thay bằng ObjectId của Business\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses"
							]
						},
						"description": "Tạo Course mới (cần languageID hợp lệ và businessId)"
					},
					"response": []
				},
				{
					"name": "Get All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của course đầu tiên vào biến collection 'courseId'",
									"if (pm.response.code === 200) {",
									"    const courses = pm.response.json();",
									"    if (courses && courses.length > 0) {",
									"        pm.collectionVariables.set(\"courseId\", courses[0]._id);",
									"        console.log(`Saved first course ID to collection variable 'courseId': ${courses[0]._id}`);",
									"    } else {",
									"        console.log('No courses found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get courses.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses"
							],
							"query": [
								{
									"key": "businessId",
									"value": "{{businessId}}",
									"description": "Filter courses by business ID",
									"disabled": true
								}
							]
						},
						"description": "Lấy danh sách Courses. Có thể lọc theo businessId. Lưu _id course đầu tiên vào {{courseId}}."
					},
					"response": []
				},
				{
					"name": "Get Courses by Business ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/courses/business/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses",
								"business",
								"{{businessId}}"
							]
						},
						"description": "Lấy danh sách khóa học thuộc về một business cụ thể"
					},
					"response": []
				},
				{
					"name": "Get Course by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses",
								"{{courseId}}"
							]
						},
						"description": "Lấy thông tin Course theo {{courseId}}"
					},
					"response": []
				},
				{
					"name": "Update Course",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"infor\": \"Khóa học Postman Nâng cao và Tự động hóa Test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses",
								"{{courseId}}"
							]
						},
						"description": "Cập nhật thông tin Course theo {{courseId}}"
					},
					"response": []
				},
				{
					"name": "Delete Course",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"courses",
								"{{courseId}}"
							]
						},
						"description": "Xóa Course theo {{courseId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Lessons",
			"item": [
				{
					"name": "Create Lesson",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"idLesson\": \"L_POSTMAN\",\n  \"idCourse\": \"<ObjectId_Cua_Course>\", // Thay bằng ObjectId của Course mong muốn\n  \"name\": \"Bài học về Variables trong Postman\",\n  \"content\": \"Cách sử dụng biến môi trường, collection, global.\",\n  \"linkVideo\": \"http://example.com/postman_vars\",\n  \"status\": \"published\",\n  \"idTest\": \"<ObjectId_Cua_Test>\" // Thay bằng ObjectId của Test liên quan (nếu có)\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/lessons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lessons"
							]
						},
						"description": "Tạo Lesson mới (cần idCourse, idTest hợp lệ)"
					},
					"response": []
				},
				{
					"name": "Get All Lessons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của lesson đầu tiên vào biến collection 'lessonId'",
									"if (pm.response.code === 200) {",
									"    const lessons = pm.response.json();",
									"    if (lessons && lessons.length > 0) {",
									"        pm.collectionVariables.set(\"lessonId\", lessons[0]._id);",
									"        console.log(`Saved first lesson ID to collection variable 'lessonId': ${lessons[0]._id}`);",
									"    } else {",
									"        console.log('No lessons found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get lessons.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lessons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lessons"
							]
						},
						"description": "Lấy danh sách Lessons. Lưu _id lesson đầu tiên vào {{lessonId}}."
					},
					"response": []
				},
				{
					"name": "Get Lesson by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lessons/{{lessonId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lessons",
								"{{lessonId}}"
							]
						},
						"description": "Lấy thông tin Lesson theo {{lessonId}}"
					},
					"response": []
				},
				{
					"name": "Update Lesson",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Bài học về Scripting trong Postman\",\n  \"status\": \"draft\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/lessons/{{lessonId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lessons",
								"{{lessonId}}"
							]
						},
						"description": "Cập nhật thông tin Lesson theo {{lessonId}}"
					},
					"response": []
				},
				{
					"name": "Delete Lesson",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lessons/{{lessonId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lessons",
								"{{lessonId}}"
							]
						},
						"description": "Xóa Lesson theo {{lessonId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Create Test",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"idTest\": \"T_POSTMAN\",\n  \"idLesson\": \"<ObjectId_Cua_Lesson>\", // Thay bằng ObjectId của Lesson\n  \"content\": \"Bài Test về kiến thức Postman cơ bản\",\n  \"idQuestion\": [] // Thêm ObjectId của Question sau\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Tạo Test mới (cần idLesson hợp lệ)"
					},
					"response": []
				},
				{
					"name": "Get All Tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của test đầu tiên vào biến collection 'testId'",
									"if (pm.response.code === 200) {",
									"    const tests = pm.response.json();",
									"    if (tests && tests.length > 0) {",
									"        pm.collectionVariables.set(\"testId\", tests[0]._id);",
									"        console.log(`Saved first test ID to collection variable 'testId': ${tests[0]._id}`);",
									"    } else {",
									"        console.log('No tests found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get tests.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests"
							]
						},
						"description": "Lấy danh sách Tests. Lưu _id test đầu tiên vào {{testId}}."
					},
					"response": []
				},
				{
					"name": "Get Tests by Business ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tests/business/{{businessId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"business",
								"{{businessId}}"
							]
						},
						"description": "Lấy tất cả bài tests thuộc về các khóa học của một business cụ thể. Kết quả được tổ chức theo khóa học và bài học."
					},
					"response": []
				},
				{
					"name": "Get Test by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}"
							]
						},
						"description": "Lấy thông tin Test theo {{testId}}"
					},
					"response": []
				},
				{
					"name": "Update Test",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Bài Test về kiến thức Postman cơ bản và nâng cao\",\n  \"idQuestion\": [\n      \"<ObjectId_Cua_Question_Da_Tao_1>\", \n      \"<ObjectId_Cua_Question_Da_Tao_2>\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}"
							]
						},
						"description": "Cập nhật thông tin Test theo {{testId}} (cần idQuestion hợp lệ)"
					},
					"response": []
				},
				{
					"name": "Delete Test",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tests/{{testId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tests",
								"{{testId}}"
							]
						},
						"description": "Xóa Test theo {{testId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Questions",
			"item": [
				{
					"name": "Create Question",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"idQuestion\": \"Q_POSTMAN\",\n  \"idTest\": \"<ObjectId_Cua_Test>\", // Thay bằng ObjectId của Test\n  \"question\": \"Biến Collection trong Postman dùng để làm gì?\",\n  \"options\": [\n    \"Lưu trữ giá trị dùng chung trong một Collection\",\n    \"Lưu trữ giá trị cho các môi trường khác nhau\",\n    \"Lưu trữ giá trị tạm thời\",\n    \"Lưu trữ giá trị vĩnh viễn\"\n  ],\n  \"correctAnswerIndex\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/questions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questions"
							]
						},
						"description": "Tạo câu hỏi trắc nghiệm với nhiều lựa chọn (Multiple choice). correctAnswerIndex là chỉ số của đáp án đúng trong mảng options (bắt đầu từ 0)."
					},
					"response": []
				},
				{
					"name": "Get All Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của question đầu tiên vào biến collection 'questionId'",
									"if (pm.response.code === 200) {",
									"    const questions = pm.response.json();",
									"    if (questions && questions.length > 0) {",
									"        pm.collectionVariables.set(\"questionId\", questions[0]._id);",
									"        console.log(`Saved first question ID to collection variable 'questionId': ${questions[0]._id}`);",
									"    } else {",
									"        console.log('No questions found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get questions.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questions"
							]
						},
						"description": "Lấy danh sách Questions. Lưu _id question đầu tiên vào {{questionId}}."
					},
					"response": []
				},
				{
					"name": "Get Question by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questions/{{questionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questions",
								"{{questionId}}"
							]
						},
						"description": "Lấy thông tin Question theo {{questionId}}"
					},
					"response": []
				},
				{
					"name": "Update Question",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"question\": \"Biến Environment trong Postman dùng để làm gì?\",\n  \"answer\": \"Lưu trữ giá trị cho các môi trường khác nhau (dev, staging, prod).\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/questions/{{questionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questions",
								"{{questionId}}"
							]
						},
						"description": "Cập nhật thông tin Question theo {{questionId}}"
					},
					"response": []
				},
				{
					"name": "Delete Question",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/questions/{{questionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"questions",
								"{{questionId}}"
							]
						},
						"description": "Xóa Question theo {{questionId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Answers",
			"item": [
				{
					"name": "Submit Answer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Đây là câu trả lời của tôi\",\n  \"questionId\": \"<ObjectId_Of_Question>\",\n  \"userId\": \"<ObjectId_Of_User>\",\n  \"selectedOptionIndex\": 0,\n  \"isCorrect\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers"
							]
						},
						"description": "Gửi câu trả lời cho câu hỏi. Với câu hỏi trắc nghiệm, selectedOptionIndex chỉ định lựa chọn của người dùng (chỉ số trong mảng options)"
					},
					"response": []
				},
				{
					"name": "Submit Test Answers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"testId\": \"<ObjectId_Of_Test>\",\n  \"userId\": \"<ObjectId_Of_Student>\",\n  \"answers\": [\n    {\n      \"questionId\": \"<ObjectId_Of_Question1>\",\n      \"selectedOptionIndex\": 0\n    },\n    {\n      \"questionId\": \"<ObjectId_Of_Question2>\",\n      \"selectedOptionIndex\": 1\n    },\n    {\n      \"questionId\": \"<ObjectId_Of_Question3>\",\n      \"selectedOptionIndex\": 2\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/answers/submit-test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers",
								"submit-test"
							]
						},
						"description": "Submit answers for a complete test. This endpoint will automatically score each question, calculate the total score, and save the results to the history collection."
					},
					"response": []
				},
				{
					"name": "Get All Answers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của answer đầu tiên vào biến collection 'answerId'",
									"if (pm.response.code === 200) {",
									"    const answers = pm.response.json();",
									"    if (answers && answers.length > 0) {",
									"        pm.collectionVariables.set(\"answerId\", answers[0]._id);",
									"        console.log(`Saved first answer ID to collection variable 'answerId': ${answers[0]._id}`);",
									"    } else {",
									"        console.log('No answers found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get answers.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers"
							]
						},
						"description": "Lấy tất cả câu trả lời. Lưu _id answer đầu tiên vào {{answerId}}."
					},
					"response": []
				},
				{
					"name": "Get Answer by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/answers/{{answerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers",
								"{{answerId}}"
							]
						},
						"description": "Lấy thông tin chi tiết của câu trả lời theo ID"
					},
					"response": []
				},
				{
					"name": "Get Answers by User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/answers/user/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers",
								"user",
								"{{userId}}"
							]
						},
						"description": "Lấy tất cả câu trả lời của một người dùng cụ thể"
					},
					"response": []
				},
				{
					"name": "Get Answers by Question",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/answers/question/{{questionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers",
								"question",
								"{{questionId}}"
							]
						},
						"description": "Lấy tất cả câu trả lời cho một câu hỏi cụ thể"
					},
					"response": []
				},
				{
					"name": "Update Answer",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"Đây là câu trả lời đã cập nhật\",\n  \"isCorrect\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/answers/{{answerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers",
								"{{answerId}}"
							]
						},
						"description": "Cập nhật thông tin câu trả lời theo ID"
					},
					"response": []
				},
				{
					"name": "Delete Answer",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/answers/{{answerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"answers",
								"{{answerId}}"
							]
						},
						"description": "Xóa câu trả lời theo ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Ratings",
			"item": [
				{
					"name": "Add Rating",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"studentId\": \"<ObjectId_Of_Student>\",\n  \"courseId\": \"<ObjectId_Of_Course>\",\n  \"stars\": 4.5,\n  \"feedback\": \"Khóa học rất hay và bổ ích\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings"
							]
						},
						"description": "Thêm đánh giá mới cho khóa học"
					},
					"response": []
				},
				{
					"name": "Get All Ratings",
					"event": [
						{
							"listen": "test",
							"script": {
									"exec": [
									"// Lưu ID của rating đầu tiên vào biến collection 'ratingId'",
									"if (pm.response.code === 200) {",
									"    const ratings = pm.response.json();",
									"    if (ratings && ratings.length > 0) {",
									"        pm.collectionVariables.set(\"ratingId\", ratings[0]._id);",
									"        console.log(`Saved first rating ID to collection variable 'ratingId': ${ratings[0]._id}`);",
									"    } else {",
									"        console.log('No ratings found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get ratings.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings"
							]
						},
						"description": "Lấy tất cả đánh giá. Lưu _id rating đầu tiên vào {{ratingId}}."
					},
					"response": []
				},
				{
					"name": "Get Rating by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/{{ratingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"{{ratingId}}"
							]
						},
						"description": "Lấy thông tin chi tiết của đánh giá theo ID"
					},
					"response": []
				},
				{
					"name": "Get Ratings by Course",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/course/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"course",
								"{{courseId}}"
							]
						},
						"description": "Lấy tất cả đánh giá cho một khóa học cụ thể và điểm trung bình"
					},
					"response": []
				},
				{
					"name": "Get Ratings by Student",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/student/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"student",
								"{{studentId}}"
							]
						},
						"description": "Lấy tất cả đánh giá của một học viên cụ thể"
					},
					"response": []
				},
				{
					"name": "Update Rating",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"stars\": 5,\n  \"feedback\": \"Đánh giá đã được cập nhật, khóa học xuất sắc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ratings/{{ratingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"{{ratingId}}"
							]
						},
						"description": "Cập nhật thông tin đánh giá theo ID"
					},
					"response": []
				},
				{
					"name": "Delete Rating",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/{{ratingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"{{ratingId}}"
							]
						},
						"description": "Xóa đánh giá theo ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "History",
			"item": [
				{
					"name": "Save Test Result",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"studentId\": \"<ObjectId_Of_Student>\",\n  \"testId\": \"<ObjectId_Of_Test>\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							]
						},
						"description": "Calculate and save test results to history. This will find all the student's answers for questions in the test, calculate the score, and save the results."
					},
					"response": []
				},
				{
					"name": "Get All History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history"
							]
						},
						"description": "Get all test history entries"
					},
					"response": []
				},
				{
					"name": "Get History by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<ObjectId_Of_History>"
								}
							]
						},
						"description": "Get a specific history entry by ID"
					},
					"response": []
				},
				{
					"name": "Get History by Student",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/student/:studentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								"student",
								":studentId"
							],
							"variable": [
								{
									"key": "studentId",
									"value": "<ObjectId_Of_Student>"
								}
							]
						},
						"description": "Get all test history for a specific student"
					},
					"response": []
				},
				{
					"name": "Get History by Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/test/:testId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								"test",
								":testId"
							],
							"variable": [
								{
									"key": "testId",
									"value": "<ObjectId_Of_Test>"
								}
							]
						},
						"description": "Get all history entries for a specific test"
					},
					"response": []
				},
				{
					"name": "Get History by Course",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/course/:courseId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								"course",
								":courseId"
							],
							"variable": [
								{
									"key": "courseId",
									"value": "{{courseId}}",
									"description": "ObjectId of the course to get test history for"
								}
							]
						},
						"description": "Get test history of all students in a specific course. Results include detailed information about students, tests, lessons, and performance metrics like average score and pass rate."
					},
					"response": []
				},
				{
					"name": "Delete History",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/history/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"history",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<ObjectId_Of_History>"
								}
							]
						},
						"description": "Delete a history entry"
					},
					"response": []
				}
			]
		},
		{
			"name": "Blogs",
			"item": [
				{
					"name": "Create Blog Post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "The Future of Web Development: React vs Next.js",
									"type": "text"
								},
								{
									"key": "content",
									"value": "<p>As web technologies continue to evolve, developers must stay informed about the most efficient tools and frameworks available. React has long been a dominant force in frontend development, but Next.js is quickly gaining traction for its powerful features.</p>\n<p>In this article, we'll compare React and Next.js and help you decide which might be best for your projects.</p>\n<h2>Key Advantages of Next.js</h2>\n<ul>\n<li>Built-in server-side rendering for improved SEO and performance</li>\n<li>Automatic code splitting for faster page loads</li>\n<li>Simplified routing with file-system based router</li>\n<li>API routes that make backend development easier</li>\n<li>Static site generation for lightning-fast static websites</li>\n</ul>\n<p>While React remains an excellent choice for many applications, Next.js provides additional features that can significantly enhance user experience and developer productivity.</p>",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "Web Development,React,Next.js,JavaScript,Frontend",
									"type": "text"
								},
								{
									"key": "status",
									"value": "published",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/path/to/your/image.jpg",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/blogs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs"
							]
						},
						"description": "Create a new blog post with form-data. For the image field, enable it and select a file when needed. Authentication is required. The system automatically finds the User ID associated with your Account ID in the JWT token and assigns it to the blog post."
					},
					"response": []
				},
				{
					"name": "Get All Blogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Lưu ID của blog đầu tiên vào biến collection 'blogId'",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response && response.blogs && response.blogs.length > 0) {",
									"        pm.collectionVariables.set(\"blogId\", response.blogs[0]._id);",
									"        console.log(`Saved first blog ID to collection variable 'blogId': ${response.blogs[0]._id}`);",
									"    } else {",
									"        console.log('No blogs found to save ID.');",
									"    }",
									"} else {",
									"    console.log('Failed to get blogs.');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/blogs?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "tag",
									"value": "JavaScript",
									"disabled": true
								},
								{
									"key": "search",
									"value": "React",
									"disabled": true
								},
								{
									"key": "author",
									"value": "{{userId}}",
									"disabled": true
								}
							]
						},
						"description": "Get all published blogs with pagination. Use query parameters to filter results. The first blog's ID will be saved to {{blogId}}."
					},
					"response": []
				},
				{
					"name": "Get Blog by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/blogs/{{blogId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs",
								"{{blogId}}"
							]
						},
						"description": "Get a specific blog post with related blogs. This will increment the view count."
					},
					"response": []
				},
				{
					"name": "Update Blog",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Advanced Features in Next.js 14: A Practical Guide",
									"type": "text"
								},
								{
									"key": "content",
									"value": "<p>Next.js 14 introduces several powerful features that can significantly improve your development workflow and application performance.</p><p>Let's explore these features with practical examples.</p>",
									"type": "text"
								},
								{
									"key": "tags",
									"value": "Next.js,Web Development,React,JavaScript,Server Components",
									"type": "text"
								},
								{
									"key": "status",
									"value": "published",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/path/to/your/image.jpg",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/blogs/{{blogId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs",
								"{{blogId}}"
							]
						},
						"description": "Update a blog post with form-data. Only the blog author can update. Authentication is required. The system validates that the User ID associated with your Account token matches the User ID of the blog author."
					},
					"response": []
				},
				{
					"name": "Delete Blog",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/blogs/{{blogId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs",
								"{{blogId}}"
							]
						},
						"description": "Delete a blog post. Only the blog author can delete. Authentication is required. The system validates that the User ID associated with your Account token matches the User ID of the blog author."
					},
					"response": []
				},
				{
					"name": "Get User's Blogs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/blogs/user/blogs?page=1&limit=10&status=published",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs",
								"user",
								"blogs"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "status",
									"value": "published"
								}
							]
						},
						"description": "Get blogs created by the authenticated user. Filter by status (published or draft). Authentication is required. The system automatically finds the User ID associated with your Account token and returns only blogs created by that user."
					},
					"response": []
				},
				{
					"name": "Get Popular Tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/blogs/tags/popular",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs",
								"tags",
								"popular"
							]
						},
						"description": "Get popular tags sorted by usage count."
					},
					"response": []
				}
			]
		},
		{
			"name": "View Requests",
			"item": [
				{
					"name": "Create View Request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"studentId\": \"{{studentId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/view-requests/request",
							"host": ["{{baseUrl}}"],
							"path": ["api", "view-requests", "request"]
						},
						"description": "Create a new view request for a student profile"
					},
					"response": []
				},
				{
					"name": "Handle View Request Response (Approve/Reject)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"approve\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/view-requests/response/:requestToken",
							"host": ["{{baseUrl}}"],
							"path": ["api", "view-requests", "response", ":requestToken"],
							"variable": [
								{
									"key": "requestToken",
									"value": "",
									"description": "Token from the email URL"
								}
							]
						},
						"description": "Handle student's response to view request (approve or reject)"
					},
					"response": []
				},
				{
					"name": "Access Student Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/view-requests/access/:accessToken",
							"host": ["{{baseUrl}}"],
							"path": ["api", "view-requests", "access", ":accessToken"],
							"variable": [
								{
									"key": "accessToken",
									"value": "",
									"description": "Access token received in approval email"
								}
							]
						},
						"description": "Access student profile using the token received in approval email"
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Lesson Progress",
			"item": [
				{
					"name": "Get All Progress Records",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/progress",
							"host": ["{{baseUrl}}"],
							"path": ["progress"]
						},
						"description": "Get all student lesson progress records in the system"
					},
					"response": []
				},
				{
					"name": "Get Progress for Student",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/progress/student/{{studentId}}",
							"host": ["{{baseUrl}}"],
							"path": ["progress", "student", "{{studentId}}"]
						},
						"description": "Get all progress records for a specific student across all lessons"
					},
					"response": []
				},
				{
					"name": "Get Progress Overview for Student",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/progress/student/{{studentId}}/overview",
							"host": ["{{baseUrl}}"],
							"path": ["progress", "student", "{{studentId}}", "overview"]
						},
						"description": "Get summarized progress statistics grouped by course for a specific student"
					},
					"response": []
				},
				{
					"name": "Get Progress for Lesson",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/progress/lesson/{{lessonId}}",
							"host": ["{{baseUrl}}"],
							"path": ["progress", "lesson", "{{lessonId}}"]
						},
						"description": "Get all student progress records for a specific lesson"
					},
					"response": []
				},
				{
					"name": "Get Specific Progress Record",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/progress/{{studentId}}/{{lessonId}}",
							"host": ["{{baseUrl}}"],
							"path": ["progress", "{{studentId}}", "{{lessonId}}"]
						},
						"description": "Get progress record for a specific student-lesson pair"
					},
					"response": []
				},
				{
					"name": "Create/Update Progress Record",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"studentId\": \"{{studentId}}\",\n  \"lessonId\": \"{{lessonId}}\",\n  \"status\": \"in_progress\",\n  \"progress\": 45,\n  \"watchTime\": 900,\n  \"notes\": \"Student is making good progress, completed first exercises\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/progress",
							"host": ["{{baseUrl}}"],
							"path": ["progress"]
						},
						"description": "Create or update a progress record. If a record already exists for the student-lesson pair, it will be updated."
					},
					"response": []
				},
				{
					"name": "Delete Progress Record",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/progress/{{studentId}}/{{lessonId}}",
							"host": ["{{baseUrl}}"],
							"path": ["progress", "{{studentId}}", "{{lessonId}}"]
						},
						"description": "Delete a specific progress record"
					},
					"response": []
				},
				{
					"name": "Get Lesson with Progress",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lessons/{{lessonId}}?studentId={{studentId}}",
							"host": ["{{baseUrl}}"],
							"path": ["lessons", "{{lessonId}}"],
							"query": [
								{
									"key": "studentId",
									"value": "{{studentId}}",
									"description": "Optional student ID to include progress info"
								}
							]
						},
						"description": "Get lesson details with student progress information (if studentId is provided)"
					},
					"response": []
				},
				{
					"name": "Get Course Lessons with Progress",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lessons/course/{{courseId}}?studentId={{studentId}}",
							"host": ["{{baseUrl}}"],
							"path": ["lessons", "course", "{{courseId}}"],
							"query": [
								{
									"key": "studentId",
									"value": "{{studentId}}",
									"description": "Optional student ID to include progress info"
								}
							]
						},
						"description": "Get all lessons for a course with student progress information (if studentId is provided)"
					},
					"response": []
				},
				{
					"name": "Get Course with Progress Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/courses/{{courseId}}?studentId={{studentId}}",
							"host": ["{{baseUrl}}"],
							"path": ["courses", "{{courseId}}"],
							"query": [
								{
									"key": "studentId",
									"value": "{{studentId}}",
									"description": "Optional student ID to include progress summary"
								}
							]
						},
						"description": "Get course details with progress summary for a specific student (if studentId is provided)"
					},
					"response": []
				},
				{
					"name": "Get Business Courses with Progress",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/courses/business/{{businessId}}?studentId={{studentId}}",
							"host": ["{{baseUrl}}"],
							"path": ["courses", "business", "{{businessId}}"],
							"query": [
								{
									"key": "studentId",
									"value": "{{studentId}}",
									"description": "Optional student ID to include progress information"
								}
							]
						},
						"description": "Get all courses for a business with progress summary for a specific student (if studentId is provided)"
					},
					"response": []
				}
			]
		},
		{
			"name": "File Upload",
			"item": [
				{
					"name": "Upload Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"upload"
							]
						},
						"description": "Upload an image file to Firebase Cloud Storage. Authentication may be required depending on server implementation."
					},
					"response": []
				},
				{
					"name": "Update User Avatar",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "avatar",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/auth/update-avatar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"update-avatar"
							]
						},
						"description": "Update the current user's profile avatar image. Upload will be stored in Firebase Storage and the URL will be saved to the user profile. Authentication required."					},
					"response": []
				},
				{
					"name": "Update Blog Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/blogs/{{blogId}}/update-image",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"blogs",
								"{{blogId}}",
								"update-image"
							]
						},
						"description": "Update only the image of a blog post. This dedicated endpoint is optimized for image uploads. Authentication required and only the blog author can update the image."
					},
					"response": []
				},
				{
					"name": "Upload CV Document",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "document",
									"type": "file",
									"src": "",
									"description": "PDF or DOCX file only (max 5MB)"
								},
								{
									"key": "studentId",
									"value": "{{studentId}}",
									"type": "text",
									"description": "ID of the student uploading the CV"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/upload-cv",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"upload-cv"
							]
						},
						"description": "Upload student CV document (.pdf or .docx) to Firebase storage. Returns a signed URL and metadata for the document."
					},
					"response": []
				},
				{
					"name": "Update User CV Info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "document",
									"type": "file",
									"src": "",
									"description": "PDF or DOCX file only (max 5MB)"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/update-cv",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"update-cv"
							]
						},
						"description": "Update authenticated user's CV with a new document file. Authentication required."
					},
					"response": []
				},
				{
					"name": "Direct CV Upload",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "document",
									"type": "file",
									"src": "",
									"description": "PDF or DOCX file only (max 5MB)"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users/upload-cv",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"upload-cv"
							]
						},
						"description": "Upload and update authenticated user's CV document in a single request. Authentication required."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string",
			"description": "Base URL của API server"
		},
		{
			"key": "token",
			"value": "",
			"type": "string",
			"description": "JWT Token nhận được sau khi Login"
		},
		{
			"key": "accountId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Account (lấy từ GET /api/accounts/all-accounts)"
		},
		{
			"key": "studentId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Student (lấy từ GET /students)"
		},
		{
			"key": "businessId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Business (lấy từ GET /businesses)"
		},
		{
			"key": "languageId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Language (lấy từ GET /languages)"
		},
		{
			"key": "courseId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Course (lấy từ GET /courses)"
		},
		{
			"key": "lessonId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Lesson (lấy từ GET /lessons)"
		},
		{
			"key": "testId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Test (lấy từ GET /tests)"
		},
		{
			"key": "questionId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Question (lấy từ GET /questions)"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một User (lấy từ GET /users)"
		},
		{
			"key": "historyId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một History (lấy từ GET /history)"
		},
		{
			"key": "answerId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Answer (lấy từ GET /answers)"
		},
		{
			"key": "ratingId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Rating (lấy từ GET /ratings)"
		},
		{
			"key": "blogId",
			"value": "",
			"type": "string",
			"description": "ObjectId của một Blog (lấy từ GET /blogs)"
		}
	]
}